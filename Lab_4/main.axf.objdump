
//campus.mcgill.ca/EMF/ELE/rserve/Desktop/ECSE Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 64 0a 00 00 68 0a 00 00 6c 0a 00 00     @...d...h...l...
  30:	70 0a 00 00 60 0a 00 00 74 0a 00 00 78 0a 00 00     p...`...t...x...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000248 	bl	9fc <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b60 	.word	0x00000b60

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f98 	.word	0x00000f98

00000124 <__cs3_heap_start_ptr>:
 124:	00000fc0 	.word	0x00000fc0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fa0 	.word	0x00000fa0
 170:	00000fa3 	.word	0x00000fa3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fa0 	.word	0x00000fa0
 1bc:	00000fa0 	.word	0x00000fa0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fa0 	.word	0x00000fa0
 200:	00000000 	.word	0x00000000
 204:	00000b04 	.word	0x00000b04

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b04 	.word	0x00000b04
 250:	00000fa4 	.word	0x00000fa4
 254:	00000b60 	.word	0x00000b60
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/VGA.h"

void test_char() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]
	
	for(y = 0; y <= 59; y++){
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <test_char+0x70>
		for(x = 0; x < 79; x++){
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <test_char+0x58>
			VGA_write_char_ASM(x, y, c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb000099 	bl	510 <VGA_write_char_ASM>
void test_char() {
	int x, y;
	char c = 0;
	
	for(y = 0; y <= 59; y++){
		for(x = 0; x < 79; x++){
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004e 	cmp	r3, #78	; 0x4e
 2bc:	dafffff1 	ble	288 <test_char+0x2c>

void test_char() {
	int x, y;
	char c = 0;
	
	for(y = 0; y <= 59; y++){
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
		for(x = 0; x < 79; x++){
			VGA_write_char_ASM(x, y, c++);
		}
	}
}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:

void test_byte(){
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]

	for(y = 0; y <= 59; y++){
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
		for(x = 0; x <= 79; x+= 3){
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
			VGA_write_byte_ASM(x, y, c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb000083 	bl	53c <VGA_write_byte_ASM>
void test_byte(){
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++){
		for(x = 0; x <= 79; x+= 3){
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004f 	cmp	r3, #79	; 0x4f
 340:	dafffff1 	ble	30c <test_byte+0x2c>

void test_byte(){
	int x, y;
	char c = 0;

	for(y = 0; y <= 59; y++){
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
		for(x = 0; x <= 79; x+= 3){
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:

void test_pixel(){
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]

	for(y = 0; y <= 239; y++){
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
		for(x = 0; x <= 319; x++){
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x, y, colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb00006d 	bl	56c <VGA_draw_point_ASM>
void test_pixel(){
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++){
		for(x = 0; x <= 319; x++){
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>

void test_pixel(){
	int x, y;
	unsigned short colour = 0;

	for(y = 0; y <= 239; y++){
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
		for(x = 0; x <= 319; x++){
			VGA_draw_point_ASM(x, y, colour++);
		}
	}
}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <main>:


int main(){
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	ea000000 	b	400 <main+0x10>
		}

		if (PB_data_is_pressed_ASM(PB3)){
			VGA_clear_pixelbuff_ASM();
		}
	}
 3fc:	e1a00000 	nop			; (mov r0, r0)
}


int main(){
	while(1){
		if(PB_data_is_pressed_ASM(PB0)){
 400:	e3a00001 	mov	r0, #1
 404:	eb000084 	bl	61c <PB_data_is_pressed_ASM>
 408:	e1a03000 	mov	r3, r0
 40c:	e3530000 	cmp	r3, #0
 410:	0a000006 	beq	430 <main+0x40>
			if(read_slider_switches_ASM()){
 414:	eb0000a9 	bl	6c0 <read_slider_switches_ASM>
 418:	e1a03000 	mov	r3, r0
 41c:	e3530000 	cmp	r3, #0
 420:	0a000001 	beq	42c <main+0x3c>
				test_byte();
 424:	ebffffad 	bl	2e0 <test_byte>
 428:	ea000000 	b	430 <main+0x40>
			}else{
				test_char();
 42c:	ebffff8a 	bl	25c <test_char>
			}
		}

		if (PB_data_is_pressed_ASM(PB1)){
 430:	e3a00002 	mov	r0, #2
 434:	eb000078 	bl	61c <PB_data_is_pressed_ASM>
 438:	e1a03000 	mov	r3, r0
 43c:	e3530000 	cmp	r3, #0
 440:	0a000000 	beq	448 <main+0x58>
			test_pixel();
 444:	ebffffc6 	bl	364 <test_pixel>
		}

		if (PB_data_is_pressed_ASM(PB2)){
 448:	e3a00004 	mov	r0, #4
 44c:	eb000072 	bl	61c <PB_data_is_pressed_ASM>
 450:	e1a03000 	mov	r3, r0
 454:	e3530000 	cmp	r3, #0
 458:	0a000000 	beq	460 <main+0x70>
			VGA_clear_charbuff_ASM();
 45c:	eb000019 	bl	4c8 <VGA_clear_charbuff_ASM>
		}

		if (PB_data_is_pressed_ASM(PB3)){
 460:	e3a00008 	mov	r0, #8
 464:	eb00006c 	bl	61c <PB_data_is_pressed_ASM>
 468:	e1a03000 	mov	r3, r0
 46c:	e3530000 	cmp	r3, #0
 470:	0affffe1 	beq	3fc <main+0xc>
			VGA_clear_pixelbuff_ASM();
 474:	eb000000 	bl	47c <VGA_clear_pixelbuff_ASM>
		}
	}
 478:	eaffffdf 	b	3fc <main+0xc>

0000047c <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM


VGA_clear_pixelbuff_ASM:
	PUSH {R0-R5}
 47c:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
	LDR R0, =BASE_PIXEL
 480:	e3a00332 	mov	r0, #-939524096	; 0xc8000000
	MOV R1, #0	// count for x
 484:	e3a01000 	mov	r1, #0
	MOV R2, #0	// count for y
 488:	e3a02000 	mov	r2, #0
	MOV R3, #0 // black pixel
 48c:	e3a03000 	mov	r3, #0
	MOV R5, R0
 490:	e1a05000 	mov	r5, r0

00000494 <PIXEL_X_LOOP>:

PIXEL_X_LOOP:
	
	ADD R4, R5, R1, LSL #1
 494:	e0854081 	add	r4, r5, r1, lsl #1
	STRH R3, [R4]
 498:	e1c430b0 	strh	r3, [r4]

	ADD R1, R1, #1
 49c:	e2811001 	add	r1, r1, #1
	
	CMP R1, #320
 4a0:	e3510d05 	cmp	r1, #320	; 0x140
	BLT PIXEL_X_LOOP
 4a4:	bafffffa 	blt	494 <PIXEL_X_LOOP>

000004a8 <PIXEL_Y_LOOP>:
	

PIXEL_Y_LOOP:
	MOV R1, #0
 4a8:	e3a01000 	mov	r1, #0

	ADD R5, R0, R2, LSL #10
 4ac:	e0805502 	add	r5, r0, r2, lsl #10

	STRH R3, [R5]
 4b0:	e1c530b0 	strh	r3, [r5]
	
	CMP R2, #240
 4b4:	e35200f0 	cmp	r2, #240	; 0xf0
	ADD R2, R2, #1
 4b8:	e2822001 	add	r2, r2, #1
	BLT PIXEL_X_LOOP
 4bc:	bafffff4 	blt	494 <PIXEL_X_LOOP>

000004c0 <PIXEL_CLEAR_END>:

PIXEL_CLEAR_END:
	POP {R0-R5}
 4c0:	e8bd003f 	pop	{r0, r1, r2, r3, r4, r5}
	BX LR
 4c4:	e12fff1e 	bx	lr

000004c8 <VGA_clear_charbuff_ASM>:

VGA_clear_charbuff_ASM:
	PUSH {R0-R5}
 4c8:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
	LDR R0, =BASE_CHAR
 4cc:	e3a004c9 	mov	r0, #-922746880	; 0xc9000000
	MOV R1, #0	// x position
 4d0:	e3a01000 	mov	r1, #0
	MOV R2, #0	// y position 
 4d4:	e3a02000 	mov	r2, #0
	MOV R3, #0 // null char
 4d8:	e3a03000 	mov	r3, #0
	MOV R5, R0
 4dc:	e1a05000 	mov	r5, r0

000004e0 <CHAR_X_LOOP>:

CHAR_X_LOOP:
	
	ADD R4, R5, R1
 4e0:	e0854001 	add	r4, r5, r1
	STRB R3, [R4]
 4e4:	e5c43000 	strb	r3, [r4]

	ADD R1, R1, #1
 4e8:	e2811001 	add	r1, r1, #1
	
	CMP R1, #80
 4ec:	e3510050 	cmp	r1, #80	; 0x50
	BLT CHAR_X_LOOP
 4f0:	bafffffa 	blt	4e0 <CHAR_X_LOOP>

000004f4 <CHAR_Y_LOOP>:
	

CHAR_Y_LOOP:
	MOV R1, #0
 4f4:	e3a01000 	mov	r1, #0

	ADD R5, R0, R2, LSL #7
 4f8:	e0805382 	add	r5, r0, r2, lsl #7

	CMP R2, #60
 4fc:	e352003c 	cmp	r2, #60	; 0x3c
	
	ADD R2, R2, #1
 500:	e2822001 	add	r2, r2, #1
	BLT CHAR_X_LOOP
 504:	bafffff5 	blt	4e0 <CHAR_X_LOOP>

00000508 <CHAR_CLEAR_END>:

CHAR_CLEAR_END:
	POP {R0-R5}
 508:	e8bd003f 	pop	{r0, r1, r2, r3, r4, r5}
	BX LR
 50c:	e12fff1e 	bx	lr

00000510 <VGA_write_char_ASM>:


VGA_write_char_ASM:
	PUSH {R4 - R5}
 510:	e92d0030 	push	{r4, r5}
	LDR R4, =BASE_CHAR
 514:	e3a044c9 	mov	r4, #-922746880	; 0xc9000000
	
	CMP R0, #79
 518:	e350004f 	cmp	r0, #79	; 0x4f
	BGT END_WRITE_CHAR
 51c:	ca000004 	bgt	534 <END_WRITE_CHAR>

	CMP R1, #59
 520:	e351003b 	cmp	r1, #59	; 0x3b
	BGT END_WRITE_CHAR
 524:	ca000002 	bgt	534 <END_WRITE_CHAR>

	ADD R5, R4, R0
 528:	e0845000 	add	r5, r4, r0
	ADD R5, R5, R1, LSL #7
 52c:	e0855381 	add	r5, r5, r1, lsl #7
	STRB R2, [R5]
 530:	e5c52000 	strb	r2, [r5]

00000534 <END_WRITE_CHAR>:

END_WRITE_CHAR:
	POP {R4 -R5}
 534:	e8bd0030 	pop	{r4, r5}
	BX LR
 538:	e12fff1e 	bx	lr

0000053c <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
	PUSH {R4-R11}
 53c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}

	CMP R0, #79
 540:	e350004f 	cmp	r0, #79	; 0x4f
	BGT END_WRITE_BYTE
 544:	ca000006 	bgt	564 <END_WRITE_BYTE>

	CMP R1, #59
 548:	e351003b 	cmp	r1, #59	; 0x3b
	BGT END_WRITE_BYTE
 54c:	ca000004 	bgt	564 <END_WRITE_BYTE>
	/*MOV R4, #0 // sum of MSB
	MOV R5, #0 // sum of LSB
	MOV R6, #0 // count
	MOV R7, #1 // Bit position
*/
	LDR R4, =BASE_CHAR
 550:	e3a044c9 	mov	r4, #-922746880	; 0xc9000000
	ADD R5, R4, R0
 554:	e0845000 	add	r5, r4, r0
	ADD R5, R5, R1, LSL #7
 558:	e0855381 	add	r5, r5, r1, lsl #7
	MOV R10, #0X01
 55c:	e3a0a001 	mov	r10, #1
	//ADD R10, R5, R4, LSL #4
	STRB R10, [R5]
 560:	e5c5a000 	strb	r10, [r5]

00000564 <END_WRITE_BYTE>:

END_WRITE_BYTE:
	POP {R4-R11}
 564:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
	BX LR 
 568:	e12fff1e 	bx	lr

0000056c <VGA_draw_point_ASM>:
	MOV R5, R9*/



VGA_draw_point_ASM:
	PUSH {R4 - R5}
 56c:	e92d0030 	push	{r4, r5}
	LDR R4, =BASE_PIXEL
 570:	e3a04332 	mov	r4, #-939524096	; 0xc8000000

	ADD R5, R4, R0, LSL #1
 574:	e0845080 	add	r5, r4, r0, lsl #1
	ADD R5, R5, R1, LSL #10
 578:	e0855501 	add	r5, r5, r1, lsl #10
	STRH R2, [R5]
 57c:	e1c520b0 	strh	r2, [r5]

	POP {R4 -R5}
 580:	e8bd0030 	pop	{r4, r5}
	BX LR
 584:	e12fff1e 	bx	lr

00000588 <FIND_CHAR>:

FIND_CHAR:
	CMP R4, #0
 588:	e3540000 	cmp	r4, #0
	MOVEQ R9, #0x30
 58c:	03a09030 	moveq	r9, #48	; 0x30
	CMP R4, #1
 590:	e3540001 	cmp	r4, #1
	MOVEQ R9, #0x31
 594:	03a09031 	moveq	r9, #49	; 0x31
	CMP R4, #2
 598:	e3540002 	cmp	r4, #2
	MOVEQ R9, #0x32
 59c:	03a09032 	moveq	r9, #50	; 0x32
	CMP R4, #3
 5a0:	e3540003 	cmp	r4, #3
	MOVEQ R9, #0x33
 5a4:	03a09033 	moveq	r9, #51	; 0x33
	CMP R4, #4
 5a8:	e3540004 	cmp	r4, #4
	MOVEQ R9, #0x34
 5ac:	03a09034 	moveq	r9, #52	; 0x34
	CMP R4, #5
 5b0:	e3540005 	cmp	r4, #5
	MOVEQ R9, #0x35
 5b4:	03a09035 	moveq	r9, #53	; 0x35
	CMP R4, #6
 5b8:	e3540006 	cmp	r4, #6
	MOVEQ R9, #0x36
 5bc:	03a09036 	moveq	r9, #54	; 0x36
	CMP R4, #7
 5c0:	e3540007 	cmp	r4, #7
	MOVEQ R9, #0x37
 5c4:	03a09037 	moveq	r9, #55	; 0x37
	CMP R4, #8
 5c8:	e3540008 	cmp	r4, #8
	MOVEQ R9, #0x38
 5cc:	03a09038 	moveq	r9, #56	; 0x38
	CMP R4, #9
 5d0:	e3540009 	cmp	r4, #9
	MOVEQ R9, #0x39
 5d4:	03a09039 	moveq	r9, #57	; 0x39
	CMP R4, #10
 5d8:	e354000a 	cmp	r4, #10
	MOVEQ R9, #0x41
 5dc:	03a09041 	moveq	r9, #65	; 0x41
	CMP R4, #11
 5e0:	e354000b 	cmp	r4, #11
	MOVEQ R9, #0x42
 5e4:	03a09042 	moveq	r9, #66	; 0x42
	CMP R4, #12
 5e8:	e354000c 	cmp	r4, #12
	MOVEQ R9, #0x43
 5ec:	03a09043 	moveq	r9, #67	; 0x43
	CMP R4, #13
 5f0:	e354000d 	cmp	r4, #13
	MOVEQ R9, #0x44
 5f4:	03a09044 	moveq	r9, #68	; 0x44
	CMP R4, #14
 5f8:	e354000e 	cmp	r4, #14
	MOVEQ R9, #0x45
 5fc:	03a09045 	moveq	r9, #69	; 0x45
	CMP R4, #15
 600:	e354000f 	cmp	r4, #15
	MOVEQ R9, #0x46
 604:	03a09046 	moveq	r9, #70	; 0x46
	POP {LR}
 608:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 60c:	e12fff1e 	bx	lr

00000610 <read_PB_data_ASM>:
	.global disable_PB_INT_ASM
	.global hps_tim0_int_flag


read_PB_data_ASM:
	LDR R1, =KEY_BASE
 610:	e59f109c 	ldr	r1, [pc, #156]	; 6b4 <disable_PB_INT_ASM+0x1c>
	LDR R0, [R1]
 614:	e5910000 	ldr	r0, [r1]
	BX LR
 618:	e12fff1e 	bx	lr

0000061c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH { R1-R2}
 61c:	e92d0006 	push	{r1, r2}
	LDR R1, =KEY_BASE
 620:	e59f108c 	ldr	r1, [pc, #140]	; 6b4 <disable_PB_INT_ASM+0x1c>
	LDR R2, [R1]
 624:	e5912000 	ldr	r2, [r1]
	TST R2, R0
 628:	e1120000 	tst	r2, r0
	MOVGT R0, #1
 62c:	c3a00001 	movgt	r0, #1
	MOVEQ R0, #0
 630:	03a00000 	moveq	r0, #0
	POP {R1-R2}
 634:	e8bd0006 	pop	{r1, r2}
	BX LR 
 638:	e12fff1e 	bx	lr

0000063c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	LDR R1, = EDGE_CAPTURE_BASE
 63c:	e59f1074 	ldr	r1, [pc, #116]	; 6b8 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]
 640:	e5910000 	ldr	r0, [r1]
	BX LR
 644:	e12fff1e 	bx	lr

00000648 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH { R1-R2 }
 648:	e92d0006 	push	{r1, r2}
	LDR R1, = EDGE_CAPTURE_BASE
 64c:	e59f1064 	ldr	r1, [pc, #100]	; 6b8 <disable_PB_INT_ASM+0x20>
	LDR R2, [R1]
 650:	e5912000 	ldr	r2, [r1]
	TST R2, R0
 654:	e1120000 	tst	r2, r0
	MOVGT R0, #1
 658:	c3a00001 	movgt	r0, #1
	MOVEQ R0, #0
 65c:	03a00000 	moveq	r0, #0
	POP {R1-R2}
 660:	e8bd0006 	pop	{r1, r2}
	BX LR 
 664:	e12fff1e 	bx	lr

00000668 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	PUSH { R1-R2 }
 668:	e92d0006 	push	{r1, r2}
	LDR R1, = EDGE_CAPTURE_BASE
 66c:	e59f1044 	ldr	r1, [pc, #68]	; 6b8 <disable_PB_INT_ASM+0x20>
	MOV R2, #0xf
 670:	e3a0200f 	mov	r2, #15
	STR R2, [R1]
 674:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 678:	e8bd0006 	pop	{r1, r2}
	BX LR
 67c:	e12fff1e 	bx	lr

00000680 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
	PUSH { R1-R2 }
 680:	e92d0006 	push	{r1, r2}
	LDR R1, = INTERRUPT_MASK_BASE
 684:	e59f1030 	ldr	r1, [pc, #48]	; 6bc <disable_PB_INT_ASM+0x24>
	AND R2, R0, #0xf
 688:	e200200f 	and	r2, r0, #15
	STR R2, [R1]
 68c:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 690:	e8bd0006 	pop	{r1, r2}
	BX LR 
 694:	e12fff1e 	bx	lr

00000698 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	PUSH { R1-R2 }
 698:	e92d0006 	push	{r1, r2}
	LDR R1, = INTERRUPT_MASK_BASE
 69c:	e59f1018 	ldr	r1, [pc, #24]	; 6bc <disable_PB_INT_ASM+0x24>
	MVN R0, R0
 6a0:	e1e00000 	mvn	r0, r0
	AND R2, R0, #0xf
 6a4:	e200200f 	and	r2, r0, #15
	STR R2, [R1]
 6a8:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 6ac:	e8bd0006 	pop	{r1, r2}
	BX LR 
 6b0:	e12fff1e 	bx	lr
	.global disable_PB_INT_ASM
	.global hps_tim0_int_flag


read_PB_data_ASM:
	LDR R1, =KEY_BASE
 6b4:	ff200050 	.word	0xff200050
	MOVEQ R0, #0
	POP {R1-R2}
	BX LR 

read_PB_edgecap_ASM:
	LDR R1, = EDGE_CAPTURE_BASE
 6b8:	ff20005c 	.word	0xff20005c
	POP {R1-R2}
	BX LR

enable_PB_INT_ASM:
	PUSH { R1-R2 }
	LDR R1, = INTERRUPT_MASK_BASE
 6bc:	ff200058 	.word	0xff200058

000006c0 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 6c0:	e59f1004 	ldr	r1, [pc, #4]	; 6cc <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 6c4:	e5910000 	ldr	r0, [r1]
	BX LR
 6c8:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 6cc:	ff200040 	.word	0xff200040

000006d0 <atexit>:
 6d0:	e1a01000 	mov	r1, r0
 6d4:	e3a00000 	mov	r0, #0
 6d8:	e92d4008 	push	{r3, lr}
 6dc:	e1a02000 	mov	r2, r0
 6e0:	e1a03000 	mov	r3, r0
 6e4:	eb00000e 	bl	724 <__register_exitproc>
 6e8:	e8bd4008 	pop	{r3, lr}
 6ec:	e12fff1e 	bx	lr

000006f0 <exit>:
 6f0:	e92d4008 	push	{r3, lr}
 6f4:	e3a01000 	mov	r1, #0
 6f8:	e1a04000 	mov	r4, r0
 6fc:	eb000045 	bl	818 <__call_exitprocs>
 700:	e59f3018 	ldr	r3, [pc, #24]	; 720 <exit+0x30>
 704:	e5930000 	ldr	r0, [r3]
 708:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 70c:	e3530000 	cmp	r3, #0
 710:	11a0e00f 	movne	lr, pc
 714:	112fff13 	bxne	r3
 718:	e1a00004 	mov	r0, r4
 71c:	eb0000c9 	bl	a48 <_exit>
 720:	00000b08 	.word	0x00000b08

00000724 <__register_exitproc>:
 724:	e59fc0e4 	ldr	r12, [pc, #228]	; 810 <__register_exitproc+0xec>
 728:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 72c:	e59c4000 	ldr	r4, [r12]
 730:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 734:	e35c0000 	cmp	r12, #0
 738:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 73c:	e59c5004 	ldr	r5, [r12, #4]
 740:	0584c148 	streq	r12, [r4, #328]	; 0x148
 744:	e355001f 	cmp	r5, #31
 748:	e24dd010 	sub	sp, sp, #16
 74c:	e1a06000 	mov	r6, r0
 750:	da000015 	ble	7ac <__register_exitproc+0x88>
 754:	e59f00b8 	ldr	r0, [pc, #184]	; 814 <__register_exitproc+0xf0>
 758:	e3500000 	cmp	r0, #0
 75c:	1a000001 	bne	768 <__register_exitproc+0x44>
 760:	e3e00000 	mvn	r0, #0
 764:	ea000018 	b	7cc <__register_exitproc+0xa8>
 768:	e3a00e19 	mov	r0, #400	; 0x190
 76c:	e58d100c 	str	r1, [sp, #12]
 770:	e58d2008 	str	r2, [sp, #8]
 774:	e58d3004 	str	r3, [sp, #4]
 778:	e320f000 	nop	{0}
 77c:	e250c000 	subs	r12, r0, #0
 780:	e59d100c 	ldr	r1, [sp, #12]
 784:	e59d2008 	ldr	r2, [sp, #8]
 788:	e59d3004 	ldr	r3, [sp, #4]
 78c:	0afffff3 	beq	760 <__register_exitproc+0x3c>
 790:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 794:	e3a00000 	mov	r0, #0
 798:	e58c0004 	str	r0, [r12, #4]
 79c:	e58c5000 	str	r5, [r12]
 7a0:	e584c148 	str	r12, [r4, #328]	; 0x148
 7a4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7a8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7ac:	e3560000 	cmp	r6, #0
 7b0:	e59c4004 	ldr	r4, [r12, #4]
 7b4:	1a000007 	bne	7d8 <__register_exitproc+0xb4>
 7b8:	e2843002 	add	r3, r4, #2
 7bc:	e2844001 	add	r4, r4, #1
 7c0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7c4:	e58c4004 	str	r4, [r12, #4]
 7c8:	e3a00000 	mov	r0, #0
 7cc:	e28dd010 	add	sp, sp, #16
 7d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7d4:	e12fff1e 	bx	lr
 7d8:	e3a00001 	mov	r0, #1
 7dc:	e1a00410 	lsl	r0, r0, r4
 7e0:	e08c8104 	add	r8, r12, r4, lsl #2
 7e4:	e3560002 	cmp	r6, #2
 7e8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 7ec:	e5883108 	str	r3, [r8, #264]	; 0x108
 7f0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 7f4:	e1877000 	orr	r7, r7, r0
 7f8:	01830000 	orreq	r0, r3, r0
 7fc:	e1a05008 	mov	r5, r8
 800:	e5882088 	str	r2, [r8, #136]	; 0x88
 804:	e58c7188 	str	r7, [r12, #392]	; 0x188
 808:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 80c:	eaffffe9 	b	7b8 <__register_exitproc+0x94>
 810:	00000b08 	.word	0x00000b08
 814:	00000000 	.word	0x00000000

00000818 <__call_exitprocs>:
 818:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 81c:	e59f3168 	ldr	r3, [pc, #360]	; 98c <__call_exitprocs+0x174>
 820:	e5933000 	ldr	r3, [r3]
 824:	e24dd014 	sub	sp, sp, #20
 828:	e58d3004 	str	r3, [sp, #4]
 82c:	e2833f52 	add	r3, r3, #328	; 0x148
 830:	e58d0008 	str	r0, [sp, #8]
 834:	e58d300c 	str	r3, [sp, #12]
 838:	e1a07001 	mov	r7, r1
 83c:	e3a08001 	mov	r8, #1
 840:	e59d3004 	ldr	r3, [sp, #4]
 844:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 848:	e3560000 	cmp	r6, #0
 84c:	e59db00c 	ldr	r11, [sp, #12]
 850:	0a000033 	beq	924 <__call_exitprocs+0x10c>
 854:	e5965004 	ldr	r5, [r6, #4]
 858:	e2554001 	subs	r4, r5, #1
 85c:	5286a088 	addpl	r10, r6, #136	; 0x88
 860:	5285501f 	addpl	r5, r5, #31
 864:	508a5105 	addpl	r5, r10, r5, lsl #2
 868:	5a000007 	bpl	88c <__call_exitprocs+0x74>
 86c:	ea000029 	b	918 <__call_exitprocs+0x100>
 870:	e5953000 	ldr	r3, [r5]
 874:	e1530007 	cmp	r3, r7
 878:	0a000005 	beq	894 <__call_exitprocs+0x7c>
 87c:	e2444001 	sub	r4, r4, #1
 880:	e3740001 	cmn	r4, #1
 884:	e2455004 	sub	r5, r5, #4
 888:	0a000022 	beq	918 <__call_exitprocs+0x100>
 88c:	e3570000 	cmp	r7, #0
 890:	1afffff6 	bne	870 <__call_exitprocs+0x58>
 894:	e5963004 	ldr	r3, [r6, #4]
 898:	e06a2005 	rsb	r2, r10, r5
 89c:	e2433001 	sub	r3, r3, #1
 8a0:	e0862002 	add	r2, r6, r2
 8a4:	e1530004 	cmp	r3, r4
 8a8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8ac:	13a01000 	movne	r1, #0
 8b0:	05864004 	streq	r4, [r6, #4]
 8b4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8b8:	e3530000 	cmp	r3, #0
 8bc:	0affffee 	beq	87c <__call_exitprocs+0x64>
 8c0:	e1a02418 	lsl	r2, r8, r4
 8c4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8c8:	e1120001 	tst	r2, r1
 8cc:	e5969004 	ldr	r9, [r6, #4]
 8d0:	0a000016 	beq	930 <__call_exitprocs+0x118>
 8d4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8d8:	e1120001 	tst	r2, r1
 8dc:	1a000016 	bne	93c <__call_exitprocs+0x124>
 8e0:	e59d0008 	ldr	r0, [sp, #8]
 8e4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 8e8:	e1a0e00f 	mov	lr, pc
 8ec:	e12fff13 	bx	r3
 8f0:	e5963004 	ldr	r3, [r6, #4]
 8f4:	e1530009 	cmp	r3, r9
 8f8:	1affffd0 	bne	840 <__call_exitprocs+0x28>
 8fc:	e59b3000 	ldr	r3, [r11]
 900:	e1530006 	cmp	r3, r6
 904:	1affffcd 	bne	840 <__call_exitprocs+0x28>
 908:	e2444001 	sub	r4, r4, #1
 90c:	e3740001 	cmn	r4, #1
 910:	e2455004 	sub	r5, r5, #4
 914:	1affffdc 	bne	88c <__call_exitprocs+0x74>
 918:	e59f1070 	ldr	r1, [pc, #112]	; 990 <__call_exitprocs+0x178>
 91c:	e3510000 	cmp	r1, #0
 920:	1a000009 	bne	94c <__call_exitprocs+0x134>
 924:	e28dd014 	add	sp, sp, #20
 928:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 92c:	e12fff1e 	bx	lr
 930:	e1a0e00f 	mov	lr, pc
 934:	e12fff13 	bx	r3
 938:	eaffffec 	b	8f0 <__call_exitprocs+0xd8>
 93c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 940:	e1a0e00f 	mov	lr, pc
 944:	e12fff13 	bx	r3
 948:	eaffffe8 	b	8f0 <__call_exitprocs+0xd8>
 94c:	e5963004 	ldr	r3, [r6, #4]
 950:	e3530000 	cmp	r3, #0
 954:	e5963000 	ldr	r3, [r6]
 958:	1a000008 	bne	980 <__call_exitprocs+0x168>
 95c:	e3530000 	cmp	r3, #0
 960:	0a000006 	beq	980 <__call_exitprocs+0x168>
 964:	e1a00006 	mov	r0, r6
 968:	e58b3000 	str	r3, [r11]
 96c:	e320f000 	nop	{0}
 970:	e59b6000 	ldr	r6, [r11]
 974:	e3560000 	cmp	r6, #0
 978:	1affffb5 	bne	854 <__call_exitprocs+0x3c>
 97c:	eaffffe8 	b	924 <__call_exitprocs+0x10c>
 980:	e1a0b006 	mov	r11, r6
 984:	e1a06003 	mov	r6, r3
 988:	eafffff9 	b	974 <__call_exitprocs+0x15c>
 98c:	00000b08 	.word	0x00000b08
 990:	00000000 	.word	0x00000000

00000994 <register_fini>:
 994:	e92d4008 	push	{r3, lr}
 998:	e59f3010 	ldr	r3, [pc, #16]	; 9b0 <register_fini+0x1c>
 99c:	e3530000 	cmp	r3, #0
 9a0:	159f000c 	ldrne	r0, [pc, #12]	; 9b4 <register_fini+0x20>
 9a4:	1bffff49 	blne	6d0 <atexit>
 9a8:	e8bd4008 	pop	{r3, lr}
 9ac:	e12fff1e 	bx	lr
 9b0:	00000b30 	.word	0x00000b30
 9b4:	000009b8 	.word	0x000009b8

000009b8 <__libc_fini_array>:
 9b8:	e92d4038 	push	{r3, r4, r5, lr}
 9bc:	e59f5030 	ldr	r5, [pc, #48]	; 9f4 <__libc_fini_array+0x3c>
 9c0:	e59f4030 	ldr	r4, [pc, #48]	; 9f8 <__libc_fini_array+0x40>
 9c4:	e0654004 	rsb	r4, r5, r4
 9c8:	e1b04144 	asrs	r4, r4, #2
 9cc:	10855104 	addne	r5, r5, r4, lsl #2
 9d0:	0a000004 	beq	9e8 <__libc_fini_array+0x30>
 9d4:	e5353004 	ldr	r3, [r5, #-4]!
 9d8:	e1a0e00f 	mov	lr, pc
 9dc:	e12fff13 	bx	r3
 9e0:	e2544001 	subs	r4, r4, #1
 9e4:	1afffffa 	bne	9d4 <__libc_fini_array+0x1c>
 9e8:	eb000050 	bl	b30 <__libc_fini>
 9ec:	e8bd4038 	pop	{r3, r4, r5, lr}
 9f0:	e12fff1e 	bx	lr
 9f4:	00000b48 	.word	0x00000b48
 9f8:	00000b4c 	.word	0x00000b4c

000009fc <__cs3_premain>:
 9fc:	e92d4008 	push	{r3, lr}
 a00:	eb00001d 	bl	a7c <__libc_init_array>
 a04:	e59f3030 	ldr	r3, [pc, #48]	; a3c <__cs3_premain+0x40>
 a08:	e3530000 	cmp	r3, #0
 a0c:	15930000 	ldrne	r0, [r3]
 a10:	01a00003 	moveq	r0, r3
 a14:	e59f3024 	ldr	r3, [pc, #36]	; a40 <__cs3_premain+0x44>
 a18:	e3530000 	cmp	r3, #0
 a1c:	15931000 	ldrne	r1, [r3]
 a20:	01a01003 	moveq	r1, r3
 a24:	e3a02000 	mov	r2, #0
 a28:	ebfffe70 	bl	3f0 <main>
 a2c:	e59f3010 	ldr	r3, [pc, #16]	; a44 <__cs3_premain+0x48>
 a30:	e3530000 	cmp	r3, #0
 a34:	1bffff2d 	blne	6f0 <exit>
 a38:	eafffffe 	b	a38 <__cs3_premain+0x3c>
	...
 a44:	000006f0 	.word	0x000006f0

00000a48 <_exit>:
 a48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a4c:	e3a00018 	mov	r0, #24
 a50:	e59f1004 	ldr	r1, [pc, #4]	; a5c <_exit+0x14>
 a54:	ef123456 	svc	0x00123456
 a58:	eafffffe 	b	a58 <_exit+0x10>
 a5c:	00020026 	.word	0x00020026

00000a60 <__cs3_isr_interrupt>:
 a60:	eafffffe 	b	a60 <__cs3_isr_interrupt>

00000a64 <__cs3_isr_undef>:
 a64:	eafffffe 	b	a64 <__cs3_isr_undef>

00000a68 <__cs3_isr_swi>:
 a68:	eafffffe 	b	a68 <__cs3_isr_swi>

00000a6c <__cs3_isr_pabort>:
 a6c:	eafffffe 	b	a6c <__cs3_isr_pabort>

00000a70 <__cs3_isr_dabort>:
 a70:	eafffffe 	b	a70 <__cs3_isr_dabort>

00000a74 <__cs3_isr_irq>:
 a74:	eafffffe 	b	a74 <__cs3_isr_irq>

00000a78 <__cs3_isr_fiq>:
 a78:	eafffffe 	b	a78 <__cs3_isr_fiq>

00000a7c <__libc_init_array>:
 a7c:	e92d4070 	push	{r4, r5, r6, lr}
 a80:	e59f506c 	ldr	r5, [pc, #108]	; af4 <__libc_init_array+0x78>
 a84:	e59f606c 	ldr	r6, [pc, #108]	; af8 <__libc_init_array+0x7c>
 a88:	e0656006 	rsb	r6, r5, r6
 a8c:	e1b06146 	asrs	r6, r6, #2
 a90:	12455004 	subne	r5, r5, #4
 a94:	13a04000 	movne	r4, #0
 a98:	0a000005 	beq	ab4 <__libc_init_array+0x38>
 a9c:	e5b53004 	ldr	r3, [r5, #4]!
 aa0:	e2844001 	add	r4, r4, #1
 aa4:	e1a0e00f 	mov	lr, pc
 aa8:	e12fff13 	bx	r3
 aac:	e1560004 	cmp	r6, r4
 ab0:	1afffff9 	bne	a9c <__libc_init_array+0x20>
 ab4:	e59f5040 	ldr	r5, [pc, #64]	; afc <__libc_init_array+0x80>
 ab8:	e59f6040 	ldr	r6, [pc, #64]	; b00 <__libc_init_array+0x84>
 abc:	e0656006 	rsb	r6, r5, r6
 ac0:	eb000012 	bl	b10 <_init>
 ac4:	e1b06146 	asrs	r6, r6, #2
 ac8:	12455004 	subne	r5, r5, #4
 acc:	13a04000 	movne	r4, #0
 ad0:	0a000005 	beq	aec <__libc_init_array+0x70>
 ad4:	e5b53004 	ldr	r3, [r5, #4]!
 ad8:	e2844001 	add	r4, r4, #1
 adc:	e1a0e00f 	mov	lr, pc
 ae0:	e12fff13 	bx	r3
 ae4:	e1560004 	cmp	r6, r4
 ae8:	1afffff9 	bne	ad4 <__libc_init_array+0x58>
 aec:	e8bd4070 	pop	{r4, r5, r6, lr}
 af0:	e12fff1e 	bx	lr
 af4:	00000b28 	.word	0x00000b28
 af8:	00000b28 	.word	0x00000b28
 afc:	00000b28 	.word	0x00000b28
 b00:	00000b30 	.word	0x00000b30

Disassembly of section .rodata:

00000b08 <_global_impure_ptr>:
 b08:	00000b70 00000043                       p...C...

00000b10 <_init>:
 b10:	e1a0c00d 	mov	r12, sp
 b14:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b18:	e24cb004 	sub	r11, r12, #4
 b1c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b20:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b24:	e12fff1e 	bx	lr

00000b28 <__init_array_start>:
 b28:	00000994 	.word	0x00000994

00000b2c <__frame_dummy_init_array_entry>:
 b2c:	00000208                                ....

00000b30 <__libc_fini>:
 b30:	e1a0c00d 	mov	r12, sp
 b34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b38:	e24cb004 	sub	r11, r12, #4
 b3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b44:	e12fff1e 	bx	lr

00000b48 <__fini_array_start>:
 b48:	000001c4 	.word	0x000001c4

00000b4c <__cs3_regions>:
	...
 b58:	00000fa0 	.word	0x00000fa0
 b5c:	00000020 	.word	0x00000020
